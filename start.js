#!/usr/bin/env node

/**
 * Script de d√©marrage pour le backend DTC EKANI
 * V√©rifie la configuration et d√©marre le serveur
 */

const fs = require('fs');
const path = require('path');

// Charger dotenv seulement en d√©veloppement local
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

// Couleurs pour la console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// Fonction pour afficher un message color√©
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Fonction pour v√©rifier les variables d'environnement requises
function checkEnvironment() {
  log('\nüîç V√©rification de l\'environnement...', 'cyan');
  
  const requiredVars = [
    'MONGODB_URI',
    'JWT_SECRET'
  ];
  
  const missingVars = [];
  
  requiredVars.forEach(varName => {
    if (!process.env[varName]) {
      missingVars.push(varName);
      log(`‚ùå ${varName} manquant`, 'red');
    } else {
      log(`‚úÖ ${varName} configur√©`, 'green');
    }
  });
  
  if (missingVars.length > 0) {
    log('\n‚ö†Ô∏è  Variables d\'environnement manquantes!', 'yellow');
    
    if (process.env.NODE_ENV === 'production') {
      log('üîß En production, configurez ces variables dans Railway:', 'yellow');
      log('   - Allez dans votre projet Railway', 'cyan');
      log('   - Variables d\'environnement', 'cyan');
      log('   - Ajoutez MONGODB_URI et JWT_SECRET', 'cyan');
    } else {
      log('Cr√©er un fichier .env bas√© sur env.example', 'yellow');
      log('Exemple:', 'yellow');
      log('MONGODB_URI=mongodb://localhost:27017/dtc_ekani', 'cyan');
      log('JWT_SECRET=votre_secret_jwt_tres_securise_ici', 'cyan');
    }
    
    log('\n', 'reset');
    return false;
  }
  
  log('‚úÖ Environnement configur√© correctement', 'green');
  return true;
}

// Fonction pour v√©rifier la connexion MongoDB
async function checkMongoDB() {
  log('\nüóÑÔ∏è  V√©rification de la connexion MongoDB...', 'cyan');
  
  try {
    const mongoose = require('mongoose');
    await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 5000
    });
    
    log('‚úÖ Connexion MongoDB r√©ussie', 'green');
    await mongoose.disconnect();
    return true;
  } catch (error) {
    log('‚ùå Erreur de connexion MongoDB:', 'red');
    log(`   ${error.message}`, 'red');
    log('\nüí° Solutions possibles:', 'yellow');
    log('   1. D√©marrer MongoDB localement', 'cyan');
    log('   2. V√©rifier l\'URL de connexion', 'cyan');
    log('   3. V√©rifier les permissions r√©seau', 'cyan');
    log('\n', 'reset');
    return false;
  }
}

// Fonction pour initialiser la base de donn√©es
async function initializeDatabase() {
  try {
    log('   üìù Import du script d\'initialisation...', 'cyan');
    
    // Utiliser le script existant
    const { initializeDatabase: initDb } = require('./scripts/initDb');
    
    // V√©rifier si des utilisateurs existent d√©j√†
    const mongoose = require('mongoose');
    const User = require('./models/User');
    
    await mongoose.connect(process.env.MONGODB_URI);
    const userCount = await User.countDocuments();
    await mongoose.disconnect();
    
    if (userCount === 0) {
      log('   üóÑÔ∏è  Base vide, initialisation compl√®te...', 'cyan');
      await initDb();
      log('   ‚úÖ Base de donn√©es initialis√©e avec succ√®s', 'green');
    } else {
      log(`   ‚ÑπÔ∏è  ${userCount} utilisateur(s) existent d√©j√†, pas d'initialisation n√©cessaire`, 'cyan');
    }
    
  } catch (error) {
    log('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', 'red');
    log(`   ${error.message}`, 'red');
    throw error;
  }
}

// Fonction pour afficher les informations de d√©marrage
function showStartupInfo() {
  log('\nüöÄ DTC EKANI Backend', 'bright');
  log('================================', 'blue');
  
  log('\nüìã Informations:', 'cyan');
  log(`   Port: ${process.env.PORT || 5000}`, 'white');
  log(`   Environnement: ${process.env.NODE_ENV || 'development'}`, 'white');
  log(`   Base de donn√©es: ${process.env.MONGODB_URI}`, 'white');
  
  if (process.env.NODE_ENV === 'production') {
    const railwayUrl = process.env.RAILWAY_PUBLIC_DOMAIN || 'https://backendcollectivite.up.railway.app';
    log(`   URL publique: ${railwayUrl}`, 'white');
  }
  
  log('\nüîó URLs:', 'cyan');
  
  if (process.env.NODE_ENV === 'production') {
    // En production, utiliser l'URL Railway
    const railwayUrl = process.env.RAILWAY_PUBLIC_DOMAIN || 'https://backendcollectivite.up.railway.app';
    log(`   API: ${railwayUrl}/api`, 'white');
    log(`   Sant√©: ${railwayUrl}/api/health`, 'white');
    log(`   Socket.IO: ${railwayUrl}`, 'white');
  } else {
    // En d√©veloppement local
    log(`   API: http://localhost:${process.env.PORT || 5000}/api`, 'white');
    log(`   Sant√©: http://localhost:${process.env.PORT || 5000}/api/health`, 'white');
    log(`   Socket.IO: http://localhost:${process.env.PORT || 5000}`, 'white');
  }
  
  log('\nüìö Commandes utiles:', 'cyan');
  log('   npm run dev          - Mode d√©veloppement', 'white');
  log('   npm start            - Mode production', 'white');
  log('   npm run init-db      - Initialiser la base de donn√©es', 'white');
  log('   npm test             - Lancer les tests', 'white');
  
  log('\nüîë Comptes de test (apr√®s init-db):', 'cyan');
  log('   Admin: admin / Admin@2024', 'white');
  log('   CTD: ctd_user / Ctd@2024', 'white');
  log('   MINDDEVEL: minddevel_user / Minddevel@2024', 'white');
  log('   MINFI: minfi_user / Minfi@2024', 'white');
  
  log('\n', 'reset');
}

// Fonction principale
async function main() {
  try {
    showStartupInfo();
    
    // V√©rifier l'environnement
    if (!checkEnvironment()) {
      process.exit(1);
    }
    
    // V√©rifier MongoDB
    if (!await checkMongoDB()) {
      process.exit(1);
    }
    
    // Initialiser la base de donn√©es si n√©cessaire
    if (process.env.NODE_ENV === 'production' || process.env.AUTO_INIT_DB === 'true') {
      log('üóÑÔ∏è  Initialisation automatique de la base de donn√©es...', 'cyan');
      try {
        await initializeDatabase();
        log('‚úÖ Base de donn√©es initialis√©e avec succ√®s', 'green');
      } catch (error) {
        log('‚ö†Ô∏è  Erreur lors de l\'initialisation de la BD:', 'yellow');
        log(`   ${error.message}`, 'yellow');
        // Continuer le d√©marrage m√™me si l'init √©choue
      }
    }
    
    log('‚úÖ Toutes les v√©rifications sont pass√©es!', 'green');
    log('üöÄ D√©marrage du serveur...', 'bright');
    
    // Importer et d√©marrer le serveur
    const { server } = require('./server');
    
    // Gestion des erreurs non captur√©es
    process.on('uncaughtException', (error) => {
      log('\n‚ùå Erreur non captur√©e:', 'red');
      log(error.stack, 'red');
      process.exit(1);
    });
    
    process.on('unhandledRejection', (reason, promise) => {
      log('\n‚ùå Promesse rejet√©e non g√©r√©e:', 'red');
      log(`Raison: ${reason}`, 'red');
      process.exit(1);
    });
    
  } catch (error) {
    log('\n‚ùå Erreur lors du d√©marrage:', 'red');
    log(error.stack, 'red');
    process.exit(1);
  }
}

// Ex√©cuter le script principal
if (require.main === module) {
  main();
}

module.exports = { main, checkEnvironment, checkMongoDB };
