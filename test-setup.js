#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la configuration du backend
 * V√©rifie que tous les composants peuvent √™tre import√©s correctement
 */

console.log('üß™ Test de configuration du backend DTC EKANI...\n');

// Test 1: Variables d'environnement
console.log('1Ô∏è‚É£ V√©rification des variables d\'environnement...');
try {
  require('dotenv').config();
  
  const requiredVars = ['MONGODB_URI', 'JWT_SECRET'];
  const missingVars = [];
  
  requiredVars.forEach(varName => {
    if (!process.env[varName]) {
      missingVars.push(varName);
      console.log(`   ‚ùå ${varName} manquant`);
    } else {
      console.log(`   ‚úÖ ${varName} configur√©`);
    }
  });
  
  if (missingVars.length > 0) {
    console.log(`\n‚ö†Ô∏è  Variables manquantes: ${missingVars.join(', ')}`);
    console.log('   Cr√©er un fichier .env bas√© sur env.example');
  } else {
    console.log('   ‚úÖ Toutes les variables requises sont configur√©es');
  }
} catch (error) {
  console.log(`   ‚ùå Erreur: ${error.message}`);
}

// Test 2: Mod√®les
console.log('\n2Ô∏è‚É£ Test des mod√®les...');
try {
  const User = require('./models/User');
  console.log('   ‚úÖ Mod√®le User import√©');
  
  const Project = require('./models/Project');
  console.log('   ‚úÖ Mod√®le Project import√©');
  
  const Transaction = require('./models/Transaction');
  console.log('   ‚úÖ Mod√®le Transaction import√©');
  
  const Evaluation = require('./models/Evaluation');
  console.log('   ‚úÖ Mod√®le Evaluation import√©');
} catch (error) {
  console.log(`   ‚ùå Erreur: ${error.message}`);
}

// Test 3: Middleware
console.log('\n3Ô∏è‚É£ Test des middlewares...');
try {
  const auth = require('./middleware/auth');
  console.log('   ‚úÖ Middleware auth import√©');
  
  const upload = require('./middleware/upload');
  console.log('   ‚úÖ Middleware upload import√©');
} catch (error) {
  console.log(`   ‚ùå Erreur: ${error.message}`);
}

// Test 4: Utilitaires
console.log('\n4Ô∏è‚É£ Test des utilitaires...');
try {
  const blockchain = require('./utils/blockchain');
  console.log('   ‚úÖ Utilitaires blockchain import√©s');
  
  const dbConfig = require('./config/database');
  console.log('   ‚úÖ Configuration base de donn√©es import√©e');
} catch (error) {
  console.log(`   ‚ùå Erreur: ${error.message}`);
}

// Test 5: Routes
console.log('\n5Ô∏è‚É£ Test des routes...');
try {
  const authRoutes = require('./routes/auth');
  console.log('   ‚úÖ Routes auth import√©es');
  
  const projectRoutes = require('./routes/projects');
  console.log('   ‚úÖ Routes projects import√©es');
  
  const transactionRoutes = require('./routes/transactions');
  console.log('   ‚úÖ Routes transactions import√©es');
  
  const evaluationRoutes = require('./routes/evaluations');
  console.log('   ‚úÖ Routes evaluations import√©es');
  
  const userRoutes = require('./routes/users');
  console.log('   ‚úÖ Routes users import√©es');
  
  const notificationRoutes = require('./routes/notifications');
  console.log('   ‚úÖ Routes notifications import√©es');
  
  const statsRoutes = require('./routes/stats');
  console.log('   ‚úÖ Routes stats import√©es');
  
  const healthRoutes = require('./routes/health');
  console.log('   ‚úÖ Routes health import√©es');
} catch (error) {
  console.log(`   ‚ùå Erreur: ${error.message}`);
}

// Test 6: D√©pendances
console.log('\n6Ô∏è‚É£ Test des d√©pendances...');
try {
  const express = require('express');
  console.log('   ‚úÖ Express import√©');
  
  const mongoose = require('mongoose');
  console.log('   ‚úÖ Mongoose import√©');
  
  const socketIo = require('socket.io');
  console.log('   ‚úÖ Socket.IO import√©');
  
  const bcryptjs = require('bcryptjs');
  console.log('   ‚úÖ bcryptjs import√©');
  
  const jsonwebtoken = require('jsonwebtoken');
  console.log('   ‚úÖ jsonwebtoken import√©');
  
  const multer = require('multer');
  console.log('   ‚úÖ multer import√©');
  
  const { v4: uuidv4 } = require('uuid');
  console.log('   ‚úÖ uuid import√©');
} catch (error) {
  console.log(`   ‚ùå Erreur: ${error.message}`);
}

// Test 7: Configuration
console.log('\n7Ô∏è‚É£ Test de la configuration...');
try {
  const packageJson = require('./package.json');
  console.log(`   ‚úÖ package.json lu (version: ${packageJson.version})`);
  
  if (packageJson.scripts.start) {
    console.log(`   ‚úÖ Script de d√©marrage: ${packageJson.scripts.start}`);
  }
  
  if (packageJson.scripts.dev) {
    console.log(`   ‚úÖ Script de d√©veloppement: ${packageJson.scripts.dev}`);
  }
  
  if (packageJson.scripts['init-db']) {
    console.log(`   ‚úÖ Script d'initialisation DB: ${packageJson.scripts['init-db']}`);
  }
} catch (error) {
  console.log(`   ‚ùå Erreur: ${error.message}`);
}

console.log('\nüéØ R√©sum√© des tests:');
console.log('   Si tous les tests sont pass√©s (‚úÖ), le backend est pr√™t √† √™tre d√©marr√©.');
console.log('   Si des erreurs sont pr√©sentes (‚ùå), v√©rifiez la configuration.');
console.log('\nüöÄ Pour d√©marrer le backend:');
console.log('   npm run dev     - Mode d√©veloppement');
console.log('   npm start       - Mode production');
console.log('   npm run init-db - Initialiser la base de donn√©es');
console.log('\nüìö Documentation: README.md');
